*&---------------------------------------------------------------------*
*&  Include           ZAYGCOGEN_R_ARAC_KAR_CLSDAT
*&---------------------------------------------------------------------*

TABLES: vbrk, vbrp, zaygsdgens018.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-s01.
PARAMETERS: p_spmon TYPE spmon OBLIGATORY DEFAULT sy-datum(6).

SELECT-OPTIONS: s_werks FOR vbrp-werks,
                s_lcplt FOR zaygsdgens018-lcplt.
SELECTION-SCREEN END OF BLOCK b1.


TYPES: tt_fkdat_rng TYPE RANGE OF fkdat,
       tt_werks_rng TYPE RANGE OF werks_d,
       tt_lcplt_rng TYPE RANGE OF /pcis05/plalcplt.

TYPES: BEGIN OF ty_outdat.
    INCLUDE TYPE zaygcogens010.
TYPES:   msgdat TYPE bapiret2_tab.
TYPES: END OF ty_outdat.

DATA: it_excluding TYPE slis_t_extab,
      gv_count     TYPE sy-tabix,
      t_fkdat_rng  TYPE tt_fkdat_rng,
      t_werks_rng  TYPE tt_werks_rng,
      t_lcplt_rng  TYPE tt_lcplt_rng.

FIELD-SYMBOLS: <alvoutput> TYPE STANDARD TABLE.

CONSTANTS:
  BEGIN OF _msg,
    success TYPE bapi_mtype VALUE 'S',
    error   TYPE bapi_mtype VALUE 'E',
    warning TYPE bapi_mtype VALUE 'W',
    info    TYPE bapi_mtype VALUE 'I',
    abort   TYPE bapi_mtype VALUE 'A',
    id      TYPE symsgid VALUE '00',
  END OF _msg.

CONSTANTS:
  BEGIN OF _cons,
    p_spmon TYPE char10 VALUE 'P_SPMON',
    strname TYPE tabname VALUE 'ZAYGCOGENS010',
  END OF _cons.

*----------------------------------------------------------------------*
*       CLASS application DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS application DEFINITION .

  PUBLIC SECTION .
    CLASS-DATA: app TYPE REF TO application.

    TYPES:
      BEGIN OF mty_kstar,
        kstar TYPE cska-kstar,
        ltext TYPE csku-ltext,
      END OF mty_kstar,
      mtt_kstar TYPE SORTED TABLE OF mty_kstar WITH UNIQUE KEY kstar.

    DATA: mt_kstar TYPE mtt_kstar.

    CLASS-METHODS: initialization,
      at_selection_screen,
      at_selection_screen_output,
      at_selection_screen_request
        IMPORTING
          !iv_fieldname TYPE clike,
      app_instance
        RETURNING
          VALUE(mo_app) TYPE REF TO application.

    METHODS:
      f4_finanscal_perio
        CHANGING
          ch_spmon TYPE s031-spmon,
      mount_last_day
        IMPORTING
          !iv_date       TYPE datum
        RETURNING
          VALUE(rv_date) TYPE datum,
      retrieve_data
        IMPORTING
          !iv_spmon TYPE spmon
          !iv_fkdat TYPE tt_fkdat_rng OPTIONAL
          !iv_werks TYPE tt_werks_rng OPTIONAL
          !iv_lcplt TYPE tt_lcplt_rng OPTIONAL
        EXCEPTIONS
          handle_error,
      popup_confirm
        IMPORTING
          !im_batch         TYPE abap_bool DEFAULT abap_false
          !im_titlebar      TYPE char20
          !im_text_question TYPE char100
        EXPORTING
          ev_answer         TYPE char1,
      show_message_tool
        IMPORTING
          !iv_msgdat TYPE bapiret2_tab,
      show.

  PROTECTED SECTION .

    DATA: mt_fieldcat TYPE lvc_t_fcat .

  PRIVATE SECTION .
    METHODS:
      create_dynamic_alvdat
        IMPORTING
          !im_strnam TYPE dd02l-tabname
          !im_kstar  TYPE mtt_kstar
        EXPORTING
          ev_alvdat  TYPE REF TO data
          ev_fcatdat TYPE lvc_t_fcat
        EXCEPTIONS
          handle_error,
      update_fieldcat,
      alv.

ENDCLASS .                    "application DEFINITION

*----------------------------------------------------------------------*
*       CLASS application IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS application IMPLEMENTATION .

  METHOD initialization.


  ENDMETHOD.                    "initialization
  METHOD at_selection_screen.

    CASE sy-ucomm.
      WHEN 'ONLI'.
*        FREE: t_budat_rng.
*        APPEND VALUE #( sign = 'I'
*                        option = 'BT'
*                        low = |{ p_spmon }01|
*                        high = app->mount_last_day( iv_date = |{ p_spmon }01| ) ) TO t_budat_rng.
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.                    "at_selection_screen
  METHOD at_selection_screen_output.

    LOOP AT SCREEN.
      IF screen-group1 EQ 'MD1'.
        screen-input = 0.
      ENDIF.
      MODIFY SCREEN.
    ENDLOOP.

  ENDMETHOD.                    "at_selection_screen_output
  METHOD at_selection_screen_request.

    CASE iv_fieldname.
      WHEN _cons-p_spmon.
        app->f4_finanscal_perio(
          CHANGING
            ch_spmon = p_spmon ).
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.                    "at_selection_screen_request
  METHOD app_instance.

    FREE: mo_app, app.
    IF application=>app IS NOT BOUND.
      CREATE OBJECT application=>app.
    ENDIF.
    mo_app = app.

  ENDMETHOD.                    "app_instance
  METHOD f4_finanscal_perio.

    DATA: l_returncode1 TYPE sy-subrc,
          l_monat1      TYPE isellist-month,
          l_hlp_repid1  TYPE sy-repid.

    l_monat1 = sy-datum+0(6).
    CALL FUNCTION 'POPUP_TO_SELECT_MONTH'
      EXPORTING
        actual_month               = l_monat1
        factory_calendar           = ' '
        holiday_calendar           = ' '
        language                   = sy-langu
        start_column               = 8
        start_row                  = 5
      IMPORTING
        selected_month             = l_monat1
        return_code                = l_returncode1
      EXCEPTIONS
        factory_calendar_not_found = 1
        holiday_calendar_not_found = 2
        month_not_found            = 3
        OTHERS                     = 4.
    IF sy-subrc = 0 AND l_returncode1 = 0.
      ch_spmon = l_monat1.
    ENDIF.

  ENDMETHOD.                    "f4_finanscal_perio
  METHOD mount_last_day.

    CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
      EXPORTING
        day_in            = iv_date
      IMPORTING
        last_day_of_month = rv_date
      EXCEPTIONS
        day_in_no_date    = 1
        OTHERS            = 2.

  ENDMETHOD.                    "mount_last_day
  METHOD retrieve_data.

    TYPES: BEGIN OF ty_plaka,
             spmon    TYPE spmon,
             werks    TYPE zaygsdgens018-werks,
             lcplt    TYPE zaygsdgens018-lcplt,
             fkimg_kg TYPE zaygsdgens018-fkimg_kg,
             netwr    TYPE zaygsdgens018-netwr,
             wavwr    TYPE zaygcogens010-wavwr,
             brtwr    TYPE zaygcogens010-brtwr,
           END OF ty_plaka,
           tt_plaka TYPE STANDARD TABLE OF ty_plaka.

    TYPES: BEGIN OF ty_fatura,
             lcplt TYPE zaygsdgens018-lcplt,
             vbeln TYPE vbeln,
             posnr TYPE posnr,
             wavwr TYPE wavwr,
           END OF ty_fatura,
           tt_fatura TYPE STANDARD TABLE OF ty_fatura.

    TYPES: BEGIN OF ty_wavwr,
             lcplt TYPE zaygsdgens018-lcplt,
             wavwr TYPE wavwr,
           END OF ty_wavwr,
           tt_wavwr TYPE STANDARD TABLE OF ty_wavwr.

    DATA: t_plaka  TYPE tt_plaka,
          _plaka   TYPE ty_plaka,
          t_fatura TYPE tt_fatura,
          t_wavwr  TYPE tt_wavwr,
          _wavwr   TYPE ty_wavwr,
          r_vkorg  TYPE RANGE OF vkorg,
          r_fkdat  TYPE RANGE OF fkdat,
          _begda   TYPE sy-datum,
          _endda   TYPE sy-datum,
          _amount  TYPE wertv8.
    FIELD-SYMBOLS: <t_data> TYPE ANY TABLE.

    _begda = |{ p_spmon }01|.
    CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
      EXPORTING
        day_in            = _begda
      IMPORTING
        last_day_of_month = _endda
      EXCEPTIONS
        day_in_no_date    = 1
        OTHERS            = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    APPEND VALUE #( sign = 'I' option = 'BT' low = '5100' high = '5300' ) TO r_vkorg.
    APPEND VALUE #( sign = 'I' option = 'BT' low = _begda high = _endda ) TO r_fkdat.

    cl_salv_bs_runtime_info=>set( EXPORTING display  = abap_false
                                            metadata = abap_false
                                            data     = abap_true ).
    SUBMIT zaygsdgen_rsatis_rapor
      WITH rd01 EQ 'X'
      WITH s_fkdat IN r_fkdat
      WITH s_vkorg IN r_vkorg
      WITH s_werks IN s_werks
      AND RETURN.

    TRY.
        cl_salv_bs_runtime_info=>get_data_ref(  IMPORTING r_data = DATA(r_data) ).
        ASSIGN r_data->* TO <t_data>.
      CATCH cx_salv_bs_sc_runtime_info.
        EXIT.
    ENDTRY.

    cl_salv_bs_runtime_info=>clear_all( ).
    IF <t_data> IS ASSIGNED.
      LOOP AT <t_data> ASSIGNING FIELD-SYMBOL(<data>).
        _plaka = CORRESPONDING #( <data> ).
        COLLECT _plaka INTO t_plaka.
        APPEND INITIAL LINE TO t_fatura ASSIGNING FIELD-SYMBOL(<fatura>).
        <fatura> = CORRESPONDING #( <data> ).
      ENDLOOP.
    ENDIF.

    IF NOT s_lcplt[] IS INITIAL.
      DELETE t_plaka WHERE lcplt NOT IN s_lcplt.
    ENDIF.

    IF NOT t_plaka IS INITIAL.
      SELECT aufk~aufnr, cosp~kstar, cosp~wog005, aufk~ktext
        FROM aufk
        INNER JOIN cosp ON cosp~objnr = aufk~objnr
                       AND cosp~gjahr = @p_spmon(4)
                       AND cosp~versn = '000'
        FOR ALL ENTRIES IN @t_plaka
        WHERE aufnr = @t_plaka-lcplt(12)
        INTO TABLE @DATA(t_cosp).

      TYPES: BEGIN OF ty_kstar,
               kstar TYPE cosp-kstar,
             END OF ty_kstar,
             tt_kstar TYPE SORTED TABLE OF ty_kstar WITH UNIQUE KEY kstar.

      DATA: t_kstar TYPE tt_kstar.
      LOOP AT t_cosp INTO DATA(_cosp) GROUP BY ( kstar = _cosp-kstar ) ASSIGNING FIELD-SYMBOL(<routdat>).
        INSERT VALUE #( kstar = <routdat>-kstar ) INTO TABLE t_kstar.
      ENDLOOP.
      IF sy-subrc IS INITIAL.
        FREE: mt_kstar.
        SELECT cska~kstar, csku~ltext
          FROM cska
            INNER JOIN csku
              ON csku~kstar = cska~kstar AND
                 csku~ktopl = cska~ktopl AND
                 csku~spras = @sy-langu
              INTO TABLE @mt_kstar
              FOR ALL ENTRIES IN @t_kstar
              WHERE cska~kstar = @t_kstar-kstar
                AND cska~ktopl = 'AKHP'.
      ENDIF.

      IF NOT t_fatura IS INITIAL.
        SELECT vbeln, posnr, wavwr
          FROM vbrp
          INTO TABLE @DATA(t_amount)
          FOR ALL ENTRIES IN @t_fatura
          WHERE vbeln = @t_fatura-vbeln
            AND posnr = @t_fatura-posnr.
      ENDIF.

      LOOP AT t_amount ASSIGNING FIELD-SYMBOL(<amount>).
        READ TABLE t_fatura ASSIGNING <fatura> WITH KEY vbeln = <amount>-vbeln
                                                        posnr = <amount>-posnr.
        IF sy-subrc IS INITIAL.
          _wavwr = VALUE #( lcplt = <fatura>-lcplt wavwr = <amount>-wavwr ).
          COLLECT _wavwr INTO t_wavwr.
        ENDIF.
      ENDLOOP.

      create_dynamic_alvdat(
        EXPORTING
          im_strnam    = _cons-strname
          im_kstar     = mt_kstar
        IMPORTING
          ev_alvdat    = DATA(_alvdat)
          ev_fcatdat   = mt_fieldcat
        EXCEPTIONS
          handle_error = 1
          OTHERS       = 2 ).
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 RAISING handle_error.
      ENDIF.
      ASSIGN _alvdat->* TO <alvoutput>.
    ENDIF.

    LOOP AT t_plaka ASSIGNING FIELD-SYMBOL(<plaka>) WHERE lcplt IS NOT INITIAL.
      APPEND INITIAL LINE TO <alvoutput> ASSIGNING FIELD-SYMBOL(<alvdat>).
      <plaka>-spmon = p_spmon.
      CLEAR: _wavwr, <plaka>-brtwr.
      READ TABLE t_wavwr INTO _wavwr WITH KEY lcplt = <plaka>-lcplt.
      IF sy-subrc IS INITIAL.
        <plaka>-wavwr = _wavwr-wavwr.
      ENDIF.
      <plaka>-brtwr = <plaka>-netwr - <plaka>-wavwr.
      <alvdat> = CORRESPONDING #( <plaka> ).
      ASSIGN COMPONENT 'KTEXT' OF STRUCTURE <alvdat> TO FIELD-SYMBOL(<ktext>).
      IF <ktext> IS ASSIGNED.
        <ktext> = VALUE #( t_cosp[ aufnr = <plaka>-lcplt(12) ]-ktext OPTIONAL ).
      ENDIF.
      CLEAR: _amount.
      LOOP AT t_cosp INTO _cosp WHERE aufnr = <plaka>-lcplt(12) GROUP BY ( kstar = _cosp-kstar ) ASSIGNING <routdat>.
        ASSIGN COMPONENT <routdat>-kstar OF STRUCTURE <alvdat> TO FIELD-SYMBOL(<value>).
        IF <value> IS ASSIGNED.
          <value> = REDUCE #( INIT i TYPE wrbtr FOR <wa> IN GROUP <routdat> NEXT i = i + <wa>-wog005 ).
          _amount = _amount + <value>.
          ASSIGN COMPONENT 'FAAL_KAR' OF STRUCTURE <alvdat> TO FIELD-SYMBOL(<kar>).
          IF <kar> IS ASSIGNED.
            <kar> = <plaka>-brtwr - _amount.
          ENDIF.
        ENDIF.
      ENDLOOP.

    ENDLOOP.

  ENDMETHOD .                    "retrieve_data
  METHOD popup_confirm.

    IF im_batch EQ abap_false.
      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          titlebar              = im_titlebar
          text_question         = im_text_question
          text_button_1         = 'Evet'
          text_button_2         = 'Hayır'
          default_button        = '2'
          display_cancel_button = abap_false
        IMPORTING
          answer                = ev_answer
        EXCEPTIONS
          text_not_found        = 1
          OTHERS                = 2.
    ELSE.
      ev_answer = '1'.
    ENDIF.

  ENDMETHOD.                    "popup_confirm
  METHOD show_message_tool.

    CHECK iv_msgdat[] IS NOT INITIAL.

    DATA: lt_message_tab TYPE esp1_message_tab_type,
          lr_message_tab TYPE REF TO esp1_message_wa_type,
          lr_messtab     TYPE REF TO bapiret2.


    LOOP AT iv_msgdat REFERENCE INTO lr_messtab.
      APPEND INITIAL LINE TO lt_message_tab
         REFERENCE INTO lr_message_tab.
      lr_message_tab->msgty = lr_messtab->type       .
      lr_message_tab->msgid = lr_messtab->id         .
      lr_message_tab->msgno = lr_messtab->number     .
      lr_message_tab->msgv1 = lr_messtab->message_v1 .
      lr_message_tab->msgv2 = lr_messtab->message_v2 .
      lr_message_tab->msgv3 = lr_messtab->message_v3 .
      lr_message_tab->msgv4 = lr_messtab->message_v4 .
    ENDLOOP.

    CALL FUNCTION 'C14Z_MESSAGES_SHOW_AS_POPUP'
      TABLES
        i_message_tab = lt_message_tab[].

  ENDMETHOD.                    "show_message_tool
  METHOD show.

    IF <alvoutput> IS ASSIGNED.
      IF lines( <alvoutput> ) EQ 0 .
        MESSAGE TEXT-m01 TYPE _msg-success DISPLAY LIKE _msg-error. EXIT.
      ELSE.
        me->alv( ) .
      ENDIF.
    ELSE.
      MESSAGE e001(00) WITH 'Seçim kriterlerine uygun veri bulanmadı!'.
    ENDIF.

  ENDMETHOD.                    "show
  METHOD create_dynamic_alvdat.

    DATA: _colpos TYPE lvc_colpos,
          _coltxt TYPE lvc_txtcol.

    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name       = im_strnam
      CHANGING
        ct_fieldcat            = ev_fcatdat
      EXCEPTIONS
        inconsistent_interface = 1
        program_error          = 2
        OTHERS                 = 3.
    IF NOT sy-subrc IS INITIAL.
      MESSAGE s001(00) WITH 'ALV oluşturma sırasında hatalar oluştu!' RAISING handle_error.
    ENDIF.

    _colpos = lines( ev_fcatdat ).
    _colpos = _colpos - 1.
    LOOP AT im_kstar ASSIGNING FIELD-SYMBOL(<kstar>).
      ADD 1 TO _colpos.
      _coltxt = <kstar>-ltext.
      APPEND VALUE #( col_pos = _colpos
                      fieldname = <kstar>-kstar
                      datatype = 'CURR'
                      intlen = '25'
                      domname = 'WERTV13'
                      inttype = 'P'
                      coltext = _coltxt
                      scrtext_l = _coltxt
                      scrtext_m = _coltxt
                      scrtext_s = _coltxt ) TO ev_fcatdat.
    ENDLOOP.

    _colpos = lines( ev_fcatdat ).
    LOOP AT ev_fcatdat REFERENCE INTO DATA(lr_fieldcat).
      CASE lr_fieldcat->fieldname .
        WHEN 'SELKZ'.
          lr_fieldcat->tech = abap_true.
        WHEN 'FAAL_KAR'.
          lr_fieldcat->col_pos = _colpos.
      ENDCASE.
    ENDLOOP.

    CALL METHOD cl_alv_table_create=>create_dynamic_table
      EXPORTING
        it_fieldcatalog           = ev_fcatdat
      IMPORTING
        ep_table                  = ev_alvdat
      EXCEPTIONS
        generate_subpool_dir_full = 1
        OTHERS                    = 2.
    IF NOT sy-subrc IS INITIAL.
      MESSAGE s001(00) WITH 'ALV oluşturma sırasında hatalar oluştu!' RAISING handle_error.
    ENDIF.

  ENDMETHOD .                    "create_dynamic_alvdat
  METHOD update_fieldcat .

    DATA: d_text TYPE lvc_s_fcat-reptext.

    LOOP AT me->mt_fieldcat REFERENCE INTO DATA(lr_fieldcat).
      CLEAR d_text.
      CASE lr_fieldcat->fieldname .
        WHEN 'SELKZ'.
          lr_fieldcat->tech = abap_true.
      ENDCASE.
      IF d_text NE space.
        MOVE d_text TO: lr_fieldcat->scrtext_l,
                        lr_fieldcat->scrtext_m,
                        lr_fieldcat->scrtext_s,
                        lr_fieldcat->reptext.
      ENDIF.
    ENDLOOP.

  ENDMETHOD .                    "update_fieldcat
  METHOD alv .

    DATA: ls_layout TYPE lvc_s_layo.

    CLEAR: ls_layout.
    MOVE: abap_true TO ls_layout-col_opt,
          abap_true TO ls_layout-cwidth_opt,
          abap_true TO ls_layout-zebra,
          'SELKZ'   TO ls_layout-box_fname.

    IF lines( <alvoutput> ) EQ 0 .
      MESSAGE TEXT-m01 TYPE _msg-success DISPLAY LIKE _msg-error. EXIT.
    ELSE .
      CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
        EXPORTING
          i_callback_program       = sy-repid
          i_callback_pf_status_set = 'SET_PF_STATUS'
          i_callback_user_command  = 'USER_COMMAND'
          i_callback_top_of_page   = 'TOP_OF_PAGE'
          is_layout_lvc            = ls_layout
          it_fieldcat_lvc          = me->mt_fieldcat
          it_excluding             = it_excluding[]
          i_default                = abap_true
          i_save                   = abap_true
        TABLES
          t_outtab                 = <alvoutput>
        EXCEPTIONS
          program_error            = 1
          OTHERS                   = 2.
      IF sy-subrc <> 0 .
        MESSAGE TEXT-m02 TYPE _msg-success DISPLAY LIKE _msg-error. EXIT.
      ENDIF.
    ENDIF .

  ENDMETHOD .                    "alv

ENDCLASS .                    "application IMPLEMENTATION